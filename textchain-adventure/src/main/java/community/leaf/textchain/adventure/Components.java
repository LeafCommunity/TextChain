package community.leaf.textchain.adventure;

import net.kyori.adventure.text.Component;
import net.kyori.adventure.text.ComponentLike;
import net.kyori.adventure.text.TextComponent;
import net.kyori.adventure.text.format.Style;
import net.kyori.adventure.text.format.TextDecoration;
import pl.tlinkowski.annotation.basic.NullOr;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;

/**
 * Utilities and constants for working with Adventure components.
 */
public class Components
{
    private Components() { throw new UnsupportedOperationException(); }
    
    /**
     * Style constant that explicitly
     * <b>disables</b> most formatting options
     * (all {@link TextDecoration decoration types}
     * are set to false). No color is specified,
     * however, so the color from a parent style
     * will still be inherited when it's applied
     * to a child component.
     */
    public static final Style UNFORMATTED =
        Style.style()
            .decoration(TextDecoration.BOLD, false)
            .decoration(TextDecoration.ITALIC, false)
            .decoration(TextDecoration.OBFUSCATED, false)
            .decoration(TextDecoration.STRIKETHROUGH, false)
            .decoration(TextDecoration.UNDERLINED, false)
            .build();
    
    /**
     * Safely retrieves the component from the provided
     * component-like by throwing NPEs if {@code null}
     * is encountered anywhere in the component
     * conversion process.
     *
     * @param componentLike     a suspicious component-like
     *                          (received via input)
     * @return  the component version of the provided component-like
     * @throws NullPointerException
     *          if componentLike or the component it returns is null
     */
    public static Component safelyAsComponent(ComponentLike componentLike)
    {
        Objects.requireNonNull(componentLike, "componentLike");
        return Objects.requireNonNull(componentLike.asComponent(), "componentLike returned null");
    }
    
    /**
     * Flattens a component's {@code extra} components
     * (its {@link Component#children() children})
     * by applying the provided component's
     * {@link Component#style() style}
     * to each child component.
     *
     * @param component     the component with "extra" to flatten
     * @return  a list of the component's flattened children
     */
    public static List<Component> flattenExtra(Component component)
    {
        Objects.requireNonNull(component, "component");
        List<Component> flattened = new ArrayList<>();
        for (Component extra : component.children()) { flattened.add(extra.style(component.style())); }
        return flattened;
    }
    
    /**
     * Combines and flattens a component's {@code extra}
     * components (its {@link Component#children() children})
     * by first aggregating them until a new line is
     * encountered and then applying the provided component's
     * {@link Component#style() style} to each combined
     * group of children. A child component is eligible
     * to be combined unless it <b>equals</b>
     * {@link Component#newline()} (a text component
     * containing only {@code "\n"}), in which case
     * a new group of children is started.
     *
     * @param component     the component with "extra" to flatten
     * @return  a list of components generated by combining
     *          and flattening the component's children
     */
    public static List<Component> flattenExtraSplitByNewLine(Component component)
    {
        Objects.requireNonNull(component, "component");
        
        List<Component> flattened = new ArrayList<>();
        TextComponent.@NullOr Builder builder = null;
        
        for (Component extra : component.children())
        {
            if (Component.newline().equals(extra))
            {
                if (builder != null)
                {
                    flattened.add(builder.build());
                    builder = null;
                }
                
                continue;
            }
            
            if (builder == null) { builder = Component.text().style(component.style()); }
            builder.append(extra);
        }
        
        if (builder != null) { flattened.add(builder.build()); }
        return flattened;
    }
}
